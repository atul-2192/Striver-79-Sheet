struct TrieNode{
    TrieNode* children[2];
    
};
class Trie{
    private: 
    TrieNode* root;
    public:
    Trie()
    {
        root=new TrieNode();
    }
    void insert(int nums)
    {
        TrieNode* curr=root;
        for(int i=31;i>=0;i--)
        {
            int bit= (nums>>i)&1;
            if(curr->children[bit]==NULL)
            {
                curr->children[bit]=new TrieNode();
            }
            curr=curr->children[bit];
        }
    }
    int getMax(int nums)
    {
        TrieNode* curr=root;
        int val=0;
        for(int i=31;i>=0;i--)
        {
            int bit=(nums>>i)&1;
            if(curr->children[!bit]!=NULL)
            {
                val=val|(1<<i);
                curr=curr->children[!bit];
            }
            else
            {
                curr=curr->children[bit];
            }
        }
        return val;
    }
};


class Solution {
public:
    vector<int> maximizeXor(vector<int>& nums, vector<vector<int>>& queries) {
        Trie trie;
        sort(nums.begin(),nums.end());
        vector<pair<int,pair<int,int>>>q;
        for(int i=0;i<queries.size();i++)
        {
            q.push_back({queries[i][1],{queries[i][0],i}});
        }
        sort(q.begin(),q.end());
        int index=0;
        int n=nums.size();
        vector<int>ans(q.size(),0);
        for(int i=0;i<queries.size();i++)
        {
                while(index<n&&nums[index]<=q[i].first)
                {
                    trie.insert(nums[index]);
                    index++;
                }
                if(index==0)
                {
                     ans[q[i].second.second]=-1;
                }
                else
                {
                    ans[q[i].second.second]=(trie.getMax(q[i].second.first));
                }
        }
        return ans;
    }
};
