 int timer=0;

    void dfs(int i, int parent, vector<int> adj[], vector<bool>&visited, vector<int>&tin, vector<int>&low,vector<vector<int>>&ans)
    {
        visited[i]=true;
        tin[i]=timer;
        low[i]=timer;
        timer++;

        for(int x:adj[i])
        {   if(x==parent) continue;
            if(visited[x]==false)
            {
                    dfs(x,i,adj,visited,tin,low,ans);
                    low[i]=min(low[i],low[x]);
                    if(low[x]>tin[i])
                    { 
                        ans.push_back({i,x});
                    }
            }
            else
            {
                       low[i]=min(low[i],low[x]);
            }
        }

    }




    vector<vector<int>> criticalConnections(int n, vector<vector<int>>& connections) {
        vector<int>adj[n];
        for(auto x: connections)
        {
            adj[x[0]].push_back(x[1]);
            adj[x[1]].push_back(x[0]);
        }
        vector<int>tin(n,1e9),low(n,1e9);
        vector<bool>visited(n,false);
        vector<vector<int>>ans;

        for(int i=0;i<n;i++)
        {
            if(visited[i]==false)
            {
                dfs(i,-1,adj,visited,tin,low,ans);
            }
        }
        return ans;
    }
