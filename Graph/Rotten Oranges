class Solution {
public:

    int orangesRotting(vector<vector<int>>& grid) {
       int n=grid.size();
     int m=grid[0].size();
     int answer=0;
        int countOne=0;
     queue<pair<int,int>>q;
     for(int i=0;i<n;i++)
     {
         for(int j=0;j<m;j++)
         {
             if(grid[i][j]==2)
             {
                 q.push({i,j});
                  grid[i][j]=-1;
             }
             else if(grid[i][j]==1)
             {   countOne++;
                 grid[i][j]=1e8;
             }
             else grid[i][j]=-1;
         }
     }
     if(countOne==0) return 0;
     
     int x[4]={0,-1,0,1};
     int y[4]={-1,0,1,0};
     while(!q.empty())
     {
         int s=q.size();
           answer++;
         for(int i=0;i<s;i++)
         {
             auto curr=q.front();
           
             q.pop();
             for(int i=0;i<4;i++)
             {
                 int row=curr.first  + x[i];
                 int col=curr.second + y[i];
                 
                 if(row>=0 && col>=0 && row<n && col<m  )
                 {  
                     if( grid[row][col]!=-1&& grid[row][col] > answer)
                     { grid[row][col]=answer;
                      countOne--;
                         q.push({row,col});
                     }
                 }
             }
         }
          
     }
        if(countOne>0) return -1;
     // for(int i=0;i<n;i++)
     // {
     //     for(int j=0;j<m;j++)
     //     {
     //         if(grid[i][j]==1e8) return -1;
     //     }
     // }
     return answer==0?0:answer-1;
    }
};
